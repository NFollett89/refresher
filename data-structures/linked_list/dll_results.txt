
Testing NFDoublyLinkedList()
- Length while empty []:
  - Pass | length() : 0 == 0
  - Pass | index(0) : None == None
	Given index 0 out of range for linked list with length 0

- Additions while empty []:
  - Pass | push(1) : [1] == [1]
  - Pass | append(1) : [1] == [1]
  - Pass | insert(1, 1) : None == None
	Index 1 out of bounds for DLL with length 0
  - Pass | insert(1, 0) : [1] == [1]

- Additions while not empty [1]:
  - Pass | push(0) : [0, 1] == [0, 1]
  - Pass | append(3) : [0, 1, 3] == [0, 1, 3]
  - Pass | insert(2, 2) : [0, 1, 2, 3] == [0, 1, 2, 3]
  - Pass | insert(-1, 0) : [-1, 0, 1, 2, 3] == [-1, 0, 1, 2, 3]
  - Pass | insert(4, 5) : [-1, 0, 1, 2, 3, 4] == [-1, 0, 1, 2, 3, 4]
  - Pass | insert(5, 7) : None == None
	Index 7 out of bounds for DLL with length 6

- Getters while not empty [-1, 0, 1, 2, 3, 4]:
  - Pass | len(dll_1) : 6 == 6
  - Pass | length() : 6 == 6
  - Pass | head.data : -1 == -1
  - Pass | tail.data : 4 == 4
  - Pass | index(0).data : -1 == -1
  - Pass | index(3).data : 2 == 2
  - Pass | index(5).data : 4 == 4
  - Pass | index(6).data : None == None
	Given index 6 out of range for linked list with length 6

- Test iteration of new list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
  - Pass | iter() : 0 == 0
  - Pass | iter() : 1 == 1
  - Pass | iter() : 2 == 2
  - Pass | iter() : 3 == 3
  - Pass | iter() : 4 == 4
  - Pass | iter() : 5 == 5
  - Pass | iter() : 6 == 6
  - Pass | iter() : 7 == 7
  - Pass | iter() : 8 == 8
  - Pass | iter() : 9 == 9

- Test reverse iteration of list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
  - Pass | iter() : 9 == 9
  - Pass | iter() : 8 == 8
  - Pass | iter() : 7 == 7
  - Pass | iter() : 6 == 6
  - Pass | iter() : 5 == 5
  - Pass | iter() : 4 == 4
  - Pass | iter() : 3 == 3
  - Pass | iter() : 2 == 2
  - Pass | iter() : 1 == 1
  - Pass | iter() : 0 == 0

- Remove nodes from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
  - Pass | delete_head() : [1, 2, 3, 4, 5, 6, 7, 8, 9] == [1, 2, 3, 4, 5, 6, 7, 8, 9]
  - Pass | delete_tail() : [1, 2, 3, 4, 5, 6, 7, 8] == [1, 2, 3, 4, 5, 6, 7, 8]
  - Pass | delete(0) : [2, 3, 4, 5, 6, 7, 8] == [2, 3, 4, 5, 6, 7, 8]
  - Pass | delete(1) : [2, 4, 5, 6, 7, 8] == [2, 4, 5, 6, 7, 8]
  - Pass | delete(5) : [2, 4, 5, 6, 7] == [2, 4, 5, 6, 7]
  - Pass | length() : 5 == 5

Final result: Pass
