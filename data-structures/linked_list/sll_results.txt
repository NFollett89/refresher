
Testing NFSinglyLinkedList()
- Length while empty []:
  - Pass | length() : 0 == 0
  - index(0) : None
	Given index 1 out of range for linked list with length 0

- Additions while empty []:
  - Pass | push(1) : [1] == [1]
  - Pass | append(1) : [1] == [1]
  - insert(1, 1) : None
	Given index 1 out of range for linked list with length 0
  - Pass | insert(1, 0) : [1] == [1]

- Additions while not empty [1]:
  - Pass | push(0) : [0, 1] == [0, 1]
  - Pass | append(3) : [0, 1, 3] == [0, 1, 3]
  - Pass | insert(2, 2) : [0, 1, 2, 3] == [0, 1, 2, 3]
  - Pass | insert(-1, 0) : [-1, 0, 1, 2, 3] == [-1, 0, 1, 2, 3]
  - Pass | insert(4, 5) : [-1, 0, 1, 2, 3, 4] == [-1, 0, 1, 2, 3, 4]
  - insert(5, 7) : None
	Given index 7 out of range for linked list with length 6

- Getters while not empty [-1, 0, 1, 2, 3, 4]:
  - Pass | len(sll_1) : 6 == 6
  - Pass | length() : 6 == 6
  - Pass | head.data : -1 == -1
  - Pass | get_tail().data : 4 == 4
  - Pass | index(0).data : -1 == -1
  - Pass | index(3).data : 2 == 2
  - Pass | index(5).data : 4 == 4
  - index(6).data : None
	Given index 6 out of range for linked list with length 6

- Remove nodes from new list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
  - Pass | delete_head() : [1, 2, 3, 4, 5, 6, 7, 8, 9] == [1, 2, 3, 4, 5, 6, 7, 8, 9]
  - Pass | delete_tail() : [1, 2, 3, 4, 5, 6, 7, 8] == [1, 2, 3, 4, 5, 6, 7, 8]
  - Pass | delete(0) : [2, 3, 4, 5, 6, 7, 8] == [2, 3, 4, 5, 6, 7, 8]
  - Pass | delete(1) : [2, 4, 5, 6, 7, 8] == [2, 4, 5, 6, 7, 8]
  - Pass | delete(5) : [2, 4, 5, 6, 7] == [2, 4, 5, 6, 7]
  - Pass | length() : 5 == 5

Final result: Pass
